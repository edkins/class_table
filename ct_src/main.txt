class split_str {
    head : str,
    tail : str,
}

class keyword : metaclass {
    name : token : header,
    metaclass : metaclass : header,
    classes : list[keyword] : builtin,
}

fn parse_keyword(k : keyword, input: str) -> split_str {
    split_str {
        head: k.name,
        tail: "foo",
    }
}

fn parse_keywords(input: str) -> split_str {
    let mut best = null;
    for k : keyword.classes {
        let suggestion = parse_keyword(k, input);
        if best == null || suggestion.tail.len < best.tail.len {
            best = suggestion;
        }
    }
    best
}

class 'class' : keyword {}

fn main(input: str) -> str {
    let mut result = "";
    result
}